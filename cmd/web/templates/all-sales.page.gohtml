{{template "base" .}}

{{define "titile"}}
  {{index .StringMap "title"}}
{{end}}

{{define "content"}}
  <h2 class="mt-5">{{index .StringMap "title"}}</h2>
  <hr>

  <table id="sales-table" class="table table-striped">
    <thead>
      <tr>
          <th>Transaction</th>
          <th>Customer</th>
          <th>Product</th>
          <th>Amount</th>
          <th>Status</th>
      </tr>
    </thead>
    <tbody>

    </tbody>
  </table>

  <nav>
    <ul id="paginator" class="pagination">
      
    </ul>
  </nav>
{{end}}

{{define "js"}}
<script>

let currentPage = 1;
let pageSize = 4;

function paginator(pages, curPage) {
  let pgntr = document.getElementById("paginator");

  let prevDisabled = parseInt(curPage) <= 1 ? "disabled" : ""
  let nextDisabled = parseInt(curPage) >= pages + 1 ? "disabled" : ""

  let html = `<li class="page-item ${prevDisabled}"><a href="#!" class="page-link pager" data-page="${curPage - 1}">&lt;</a></li>`;

  for (var i=0 ; i<=pages; i++) {
    let activeClass = (i+1) === parseInt(curPage) ? "active" : ""

    html += `<li class="page-item ${activeClass}"><a href="#!" class="page-link pager" data-page="${i + 1}">${i + 1}</a></li>`;
  }

  html += `<li class="page-item ${nextDisabled}"><a href="#!" class="page-link pager" data-page="${curPage + 1}">&gt;</a></li>`;

  pgntr.innerHTML = html;

  let pageBtns = document.getElementsByClassName("pager");
  for (var j = 0; j < pageBtns.length; j++) {
    pageBtns[j].addEventListener("click", function(evt){
      let desirePage = evt.target.getAttribute("data-page");
      //console.log("clicked, and data-page is", desirePage);       
      if ((desirePage > 0) && (desirePage <= pages + 1)) {
        //console.log("would go to page", desirePage);
        updateTable(pageSize, desirePage);
      }
      
    })
  }
}

function updateTable(pgSize, curPage) {
  let token = localStorage.getItem("token");
  let tbody = document.getElementById("sales-table").getElementsByTagName("tbody")[0];
  let saleOrSubscr, isReccuring;

  tbody.innerHTML = ""

  // build URLs depend on sales or subscription 
  let allSalesURL = '{{index .StringMap "all-sls-sbscr-url"}}';
  if ( allSalesURL.includes("all-sales") ) {    
    saleOrSubscr = 'sale';
    isReccuring = 0;    
  } else {
    saleOrSubscr = 'subscription';
    isReccuring = 1;    
  }

  let body = {
    page_size: parseInt(pgSize, 10),
    page: parseInt(curPage, 10),
    is_recur: isReccuring,
  }
  
  const requestOptions = {
    method: 'post',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + token,
    },
    body: JSON.stringify(body),
  }  

  fetch('{{.API}}' + allSalesURL, requestOptions)
  .then(response => response.json())
  .then(function(data){
    // check if no sales 
    if (data.orders) {
        data.orders.forEach(function(i){
        let newRow = tbody.insertRow();        

        newRow.insertCell().innerHTML = `<a href="/admin/${saleOrSubscr}/${i.id}">Order ${i.id}</a>`;
        newRow.insertCell().innerHTML = `${i.customer.last_name} ${i.customer.first_name}`;
        newRow.insertCell().innerHTML = i.widget.name;
        newRow.insertCell().innerHTML = formatCurrency(i.transaction.amount);

        let statusHTML;              
        switch (i.status_id ) {
          case 1: 
            statusHTML = `<span class="badge bg-success">Charged</span>`;
            break;
          case 2:
            statusHTML = `<span class="badge bg-danger">Refunded</span>`;
            break;
          case 3:
            statusHTML = `<span class="badge bg-danger">Canceled</span>`;
            break;
          default:
            statusHTML = `<span class="badge bg-danger">Unknown</span>`;
            break;
        }        
        newRow.insertCell().innerHTML = statusHTML;

      })
      paginator(data.last_page, data.current_page)
    } else {
      let newRow = tbody.insertRow();
      let newCell = newRow.insertCell();
      newCell.setAttribute("colspan", "5");
      newCell.innerHTML = "No data available"
    }    
  })
}

document.addEventListener("DOMContentLoaded", function(){
  updateTable(pageSize, currentPage);
})

</script>
{{end}}

