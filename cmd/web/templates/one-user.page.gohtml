{{template "base" .}}

{{define "title"}}

{{end}}

{{define "content"}}
  <h2 class="mt-5">Admin user</h2>
  <hr>

  <form method="post" action="" name="user_form" id="user_form"
    class="needs-validation" autocomplete="off" novalidate="">

    <div class="mb-3">
      <label for="first_name" class="form-label">First Name</label>
      <input type="text" class="form-control" id="first_name" name="first_name"
        required="" autocomplete="first_name-new">
    </div>  

    <div class="mb-3">
      <label for="last_name" class="form-label">Last Name</label>
      <input type="text" class="form-control" id="last_name" name="last_name"
        required="" autocomplete="last_name-new">
    </div>

    <div class="mb-3">
      <label for="email" class="form-label">Email</label>
      <input type="email" class="form-control" id="email" name="email"
        required="" autocomplete="email-new">
    </div>

    <div class="mb-3">
      <label for="password" class="form-label">Password</label>
      
      <div class="input-group">
        <input type="password" class="form-control" id="password" name="password"
        autocomplete="password-new">
        <button type="button" class="btn btn-outline-secondary" id="toggle-password">
            <i class="bi bi-eye"></i>
        </button>            
      </div>
    </div>   

    <div class="mb-3">
      <label for="confirm-password" class="form-label">Confirm Password</label>
      
      <div class="input-group">
        <input type="password" class="form-control" id="confirm-password" name="confirm-password"
        autocomplete="confirm-password-new">
        <button type="button" class="btn btn-outline-secondary" id="toggle-confirm-password">
          <i class="bi bi-eye"></i>
        </button>            
      </div>
    </div> 

    <hr>

    <div class="float-start">
      <a class="btn btn-primary" href="javascript:void(0);" onclick="val()" id="saveBtn">Save Changes</a>
      <a class="btn btn-warning" href="/admin/all-users" id="cancelBtn">Cancel</a>
    </div>
    <div class="float-end">
      <a class="btn btn-danger d-none" href="javascript:void(0);" id="deleteBtn">Delete</a>
    </div>


  </form>

{{end}}

{{define "js"}}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
let token = localStorage.getItem("token");
let id = window.location.pathname.split("/").pop();
let delBtn = document.getElementById("deleteBtn");

function val() {
  let form = document.getElementById("user_form");
  if (form.checkValidity() === false) {
    this.event.preventDefault();
    this.event.stopPropagation();
    form.classList.add("was-validated");
    return
  }
  form.classList.add("was-validated");

  if (document.getElementById("password").value !== document.getElementById("confirm-password").value) {
    Swal.fire("Passwords do not match!");
    return
  }

  let payload = {
    id: parseInt(id, 10),
    first_name: document.getElementById("first_name").value,
    last_name: document.getElementById("last_name").value,
    email: document.getElementById("email").value,
    password: document.getElementById("password").value,
  }

  const requestOptions = { 
    method: 'post',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token,
      },
      body: JSON.stringify(payload),
  }

  fetch("{{.API}}/api/admin/all-users/edit/" + id, requestOptions)
  .then(response => response.json())
  .then(function(data){
    if (data.error) {
      Swal.fire("Error: " + data.message);
    } else {
      location.href = "/admin/all-users";
    }
  })


}

document.addEventListener("DOMContentLoaded", function () {
  
  if (id !== "0") {
    if (id !== "{{.UserID}}") {
      delBtn.classList.remove("d-none");
    }    

    const requestOptions = {
      method: 'post',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token,
      }
    }

    fetch("{{.API}}/api/admin/all-users/" + id, requestOptions)
    .then(response => response.json())
    .then(function (data) {
      console.log(data);
      if (data) {
                {{/* Now, obviously you can add some extra error checking here. 
                  Put a message if the user isn't found from the database or whatever it may be, but that's trivial 
                  and I'll leave that as an exercise for you. 
                  */}}
        document.getElementById("first_name").value = data.first_name;
        document.getElementById("last_name").value = data.last_name;
        document.getElementById("email").value = data.email;
      }
    })
  }
  
  
  
  //Function to set up password visibility toggle
  function setupPasswordToggle(inputID, toggleID) {
    const input = document.getElementById(inputID);
    const toggleButton = document.getElementById(toggleID);
    const icon = toggleButton.querySelector("i");

    function showPassword() {
      input.type = "text";
      icon.classList.remove("bi-eye");
      icon.classList.add("bi-eye-slash");
    }

    function hidePassword() {
      input.type = "password";
      icon.classList.remove("bi-eye-slash");
      icon.classList.add("bi-eye");
    }

    toggleButton.addEventListener("mousedown", showPassword);
    toggleButton.addEventListener("mouseup", hidePassword);
    toggleButton.addEventListener("mouseleave", hidePassword);
  }

  // Set up toggle functionality for both password fields
  setupPasswordToggle("password", "toggle-password");
  setupPasswordToggle("confirm-password", "toggle-confirm-password");    
});

delBtn.addEventListener("click", function() {

  Swal.fire({
    title: "Are you sure?",
    text: "You won't be able to revert this!",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: 'Delete User'
  }).then((result) => {
    if (result.isConfirmed) {
      const requestOptions = {
        method: 'post',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + token,
        }
      }

      fetch("{{.API}}/api/admin/all-users/delete/" + id, requestOptions)
      .then(response => response.json())
      .then(function(data){
        if (data.error) {
          Swal.fire("Error: " + data.message);
        } else {
          let jsonData = {
            action: "deleteUser",
            user_id: parseInt(id, 10),            
          }

          socket.send(JSON.stringify(jsonData));
          
          location.href="/admin/all-users";
        }
      })
    }
    
  });


})


</script>
{{end}}