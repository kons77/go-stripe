{{template "base" .}}

{{define "titile"}}
  Virtual Terminal
{{end}}

{{define "content"}}
  <h2 class="mt-3 text-center">Virtual Terminal</h2>
  <hr>
  <div class="alert alert-danger text-center d-none" id="card-messages"></div>

  <form action="/payment-succeeded" method="post"
    name="charge_form" id="charge_form"
    class="d-block needs-validation charge-form"
    autocomplete="off" novalidate>

    <div class="mb-3">
      <label for="amount" class="form-label">Amount</label>
      <input type="text" class="form-control" id="amount" name="amount"
      required="" autocomplete="amount-new">
    </div>

    <div class="mb-3">
      <label for="cardholder-name" class="form-label">Cardholder Name</label>
      <input type="text" class="form-control" id="cardholder-name" name="cardholder_name"
      required="" autocomplete="cardholder-name-new">
    </div>

    <div class="mb-3">
      <label for="email" class="form-label">Cardholder Email</label>
      <input type="email" class="form-control" id="cardholder-email" name="cardholder_email"
      required="" autocomplete="cardholder-email-new">
    </div>

    <!-- card number is built by stripe -->
    <div class="mb-3">
      <label for="card-element" class="form-label">Credit Card</label>
      <div id="card-element" class="form-control"></div>
      <!-- next 2 divs for stripe -->
      <div class="alert-danger text-center" id="card-error" role="alert"></div>
      <div class="alert-success text-center" id="card-success" role="alert"></div>
    </div>

    <hr>

    <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Charge Card</a>
    <div id="processing-payment" class="text-center d-none">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>

    <input type="hidden" name="payment_intent" id="payment_intent">
    <input type="hidden" name="payment_method" id="payment_method">
    <input type="hidden" name="payment_amount" id="payment_amount">
    <input type="hidden" name="payment_currency" id="payment_currency">

  </form>


{{end}}

{{define "js"}}
  {{$stripePubKey := index .StringMap "publishable_key"}}

  <script src="https://js.stripe.com/v3"></script>

  <script>
    let card;
    let stripe;
    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button")
    const porcessing = document.getElementById("processing-payment")
    
    //  initialize with my publishable key
    stripe = Stripe("{{$stripePubKey}}")

    // prevent user to click on the pay button twice 
    function hidePayButton() {
      payButton.classList.add("d-none");
      porcessing.classList.remove("d-none");
    }
    
    function showPayButton() {
      payButton.classList.remove("d-none");
      porcessing.classList.add("d-none");
    }

    function showCardError(msg) {
      cardMessages.classList.add("alert-danger");
      cardMessages.classList.remove("alert-success");
      cardMessages.classList.remove("d-none");
      cardMessages.innerText = msg;
    }

    function showCardSuccess() {
      cardMessages.classList.remove("alert-danger");     
      cardMessages.classList.add("alert-success");       
      cardMessages.classList.remove("d-none");
      cardMessages.innerText = "Transaction successful";
    }

    function val() {
      let form = document.getElementById("charge_form")
      if (form.checkValidity() === false) {
        this.event.preventDefault();
        this.event.stopPropagation();
        form.classList.add("was-validated");
        return;
      }
      form.classList.add("was-validated")
      hidePayButton();

      let amountToCharge = String(parseFloat(document.getElementById("amount").value) * 100)
      
      let payload = {
        amount: amountToCharge,
        currency: 'usd',
      }

      const requestOptions = {
        method: 'post',
        headres: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      }

      // apiUrl = "http://127.0.0.1:4001/api/payment-intent"
      let apiUrl = "{{.API}}/api/payment-intent"
      fetch(apiUrl, requestOptions)
        .then(response => response.text()) 
        .then(response => {
          let data;
          try {
            data = JSON.parse(response);
            stripe.confirmCardPayment(data.client_secret, {
              payment_method: {
                card: card,
                billing_details: {
                  name: document.getElementById("cardholder-name").value,
                }
              }
            }).then(function(result) {
              if (result.error) {
                // card declined or something went wrong witj the card
                showCardError(result.error.message);
                showPayButton();
              } else if (result.paymentIntent) {
                if (result.paymentIntent.status === "succeeded") {
                  // we have charge the card 
                  document.getElementById("payment_method").value = result.paymentIntent.payment_method_types[0];
                  document.getElementById("payment_intent").value = result.paymentIntent.id;
                  document.getElementById("payment_amount").value = result.paymentIntent.amount;
                  document.getElementById("payment_currency").value = result.paymentIntent.currency;
                  porcessing.classList.add("d-none");
                  showCardSuccess();
                  // would submit the form
                  document.getElementById("charge_form").submit();

                }
              }
            })
          } catch (err) {
            showCardError("Invalid response from payment gateway!");
            showPayButtons();
          }
        })
    }

    (function () {
      // create stripe & elements
      const elements = stripe.elements();
      const style = {
        // stripe especial css style
        base : {
          fontSize: '16px',
          lineHeight: '24px',
        }
      };

      //create card entry 
      card = elements.create('card', {
        style: style,
        hidePostalCode: true,
      });
      card.mount("#card-element");

      // check for input errors - https://stripe.com/docs/js/element/events/on_change?type=cardElement 
      card.on("change", function(event) {
        var displayError = document.getElementById("card-error");
        if (event.error) {
          displayError.classList.remove('d-none');
          displayError.textContent = event.error.message;
        } else {
          displayError.classList.add('d-none');
          displayError.textConten = '';
        }
      })
    })();

  </script>
{{end}}